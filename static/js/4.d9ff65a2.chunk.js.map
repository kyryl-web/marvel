{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charForm/CharForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","getItem","item","char","name","description","slice","thumbnail","path","extension","homapage","urls","wiki","comics","items","comic","title","price","digitalId","prices","language","textObjects","pageCount","View","homepage","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEned","setcharEned","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","arr","i","CSSTransition","timeout","classNames","ref","el","tabIndex","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","CharForm","isError","setIsError","input","formik","useFormik","initialValues","validationSchema","Yup","required","min","onSubmit","values","trim","catch","console","log","handleSubmit","htmlFor","type","value","placeholder","onChange","handleChange","onBlur","handleBlur","Object","keys","to","errors","touched","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"iGAAe,UAA0B,kC,OCU1BA,IARM,WACnB,OACE,qBAAKC,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAC9FC,IAAKC,EACLC,IAAI,Y,2EC+DOC,IAnEU,WACvB,MCDqB,WACrB,MAA8BC,oBAAS,GAAM,mBAAtCC,EAAO,KAAEC,EAAU,KAC1B,EAA0BF,mBAAS,MAAK,mBAAjCG,EAAK,KAAEC,EAAQ,KA0BtB,MAAO,CAACH,UAASI,QAxBDC,sBAAW,uCAAC,WAAOC,GAAG,2FAEnB,OAFqBC,EAAM,+BAAG,MAAOC,EAAI,+BAAG,KAAMC,EAAO,+BAAG,CAAC,eAAgB,oBAE9FR,GAAW,GAAM,kBAGQS,MAAMJ,EAAK,CAACC,SAAQC,OAAMC,YAAU,KAAD,EAA5C,IAARE,EAAQ,QAEAC,GAAG,CAAD,sBACR,IAAIC,MAAM,mBAAD,OAAoBP,EAAG,qBAAaK,EAASG,SAAU,KAAD,oBAGpDH,EAASI,OAAO,KAAD,GAChB,OADZC,EAAI,OACVf,GAAW,GAAO,kBACXe,GAAI,QAIS,MAJT,0BAGXf,GAAW,GACXE,EAAS,KAAEc,SAAS,+DAIvB,mDArB0B,GAqBxB,IAGuBf,QAAOgB,WADdb,uBAAY,kBAAMF,EAAS,QAAO,KD1BPgB,GAAvCnB,EAAO,EAAPA,QAASI,EAAO,EAAPA,QAASF,EAAK,EAALA,MAAOgB,EAAU,EAAVA,WAE1BE,EAAW,4CACXC,EAAU,0CAIVC,EAAgB,uCAAG,0CAAAC,EAAA,sDAA2B,OAApBC,EAAM,+BAHlB,IAGgC,SAChCpB,EAAQ,GAAD,OAAIgB,EAAQ,qCAA6BI,EAAM,YAAIH,IAAW,KAAD,EAA7E,OAAHI,EAAG,yBACFA,EAAIT,KAAKU,QAAQC,IAAIC,IAAoB,2CACjD,kBAHqB,mCAKhBC,EAAY,uCAAG,WAAOC,GAAE,uFACV1B,EAAQ,GAAD,OAAIgB,EAAQ,sBAAcU,EAAE,YAAIT,IAAW,KAAD,EAA1D,OAAHI,EAAG,yBACFG,EAAoBH,EAAIT,KAAKU,QAAQ,KAAG,2CAChD,gBAHiB,sCAKZK,EAAY,uCAAG,0CAAAR,EAAA,sDAA6B,OAAtBC,EAAM,+BAZZ,MAY4B,SAC9BpB,EAAQ,GAAD,OAAIgB,EAAQ,iCAAyBI,EAAM,YAAIH,IAAW,KAAD,EAAzE,OAAHI,EAAG,yBACFA,EAAIT,KAAKU,QAAQC,IAAIK,IAAiB,2CAC9C,kBAHiB,mCAKZC,EAAQ,uCAAG,WAAOH,GAAE,uFACN1B,EAAQ,GAAD,OAAIgB,EAAQ,kBAAUU,EAAE,YAAIT,IAAW,KAAD,EAAtD,OAAHI,EAAG,yBACFO,EAAiBP,EAAIT,KAAKU,QAAQ,KAAG,2CAC7C,gBAHa,sCAKRQ,EAAO,uCAAG,WAAOJ,EAAIK,GAAI,0EAEhB,SAATA,EAAe,gCACL/B,EAAQ,GAAD,OAAIgB,EAAQ,sBAAcU,EAAE,YAAIT,IAAW,KAAD,EAA1D,OAAHI,EAAG,yBACIG,EAAoBH,EAAIT,KAAKU,QAAQ,KAAG,UAE/B,UAATS,EAAgB,kCACX/B,EAAQ,GAAD,OAAIgB,EAAQ,kBAAUU,EAAE,YAAIT,IAAW,KAAD,GAAtD,OAAHI,EAAG,yBACIO,EAAiBP,EAAIT,KAAKU,QAAQ,KAAG,4CAG/C,gBAXY,wCAYPE,EAAsB,SAACQ,GAC3B,MAAO,CACLN,GAAIM,EAAKN,GACTO,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,UAAMF,EAAKE,YAAYC,MAAM,EAAG,KAAI,OAAQ,6CACzEC,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAGtC,IACvBuC,KAAMT,EAAKQ,KAAK,GAAGtC,IACnBwC,OAAQV,EAAKU,OAAOC,QAIlBf,EAAmB,SAACgB,GACxB,MAAO,CACLlB,GAAIkB,EAAMlB,GACVmB,MAAOD,EAAMC,MACbC,MAAOF,EAAMG,WAAaH,EAAMI,OAAO,GAAGF,MAAQF,EAAMI,OAAO,GAAGF,MAAQ,IAAM,gBAChFV,UAAWQ,EAAMR,UAAUC,KAAO,IAAMO,EAAMR,UAAUE,UACxDJ,YAAaU,EAAMV,aAAe,0BAClCe,SAAUL,EAAMM,YAAYD,UAAY,QACxCE,UAAWP,EAAMO,UAAS,UAAMP,EAAMO,UAAS,OAAQ,6CAG3D,MAAO,CAACvD,UAASE,QAAOoB,mBAAkBO,eAAcX,aAAYa,eAAcE,WAAUC,a,0LEjE/E,G,MAAA,IAA0B,qC,OCyDnCsB,EAAO,SAAH,GAAgB,IAAXpB,EAAI,EAAJA,KACJC,EAAgDD,EAAhDC,KAAMC,EAA0CF,EAA1CE,YAAaE,EAA6BJ,EAA7BI,UAAWiB,EAAkBrB,EAAlBqB,SAAUZ,EAAQT,EAARS,KAC3Ca,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdlB,IACAkB,EAAW,CAAC,UAAc,YAI1B,sBAAKC,UAAU,oBAAmB,UAC9B,qBAAKhE,IAAK6C,EAAW3C,IAAI,mBAAmB8D,UAAU,kBAAkBtE,MAAOqE,IAC/E,sBAAKC,UAAU,mBAAkB,UAC7B,mBAAGA,UAAU,mBAAkB,SAAEtB,IACjC,mBAAGsB,UAAU,oBAAmB,SAC3BrB,IAEL,sBAAKqB,UAAU,mBAAkB,UAC7B,mBAAGC,KAAMH,EAAUE,UAAU,sBAAqB,SAC9C,qBAAKA,UAAU,QAAO,SAAC,eAE3B,mBAAGC,KAAMf,EAAMc,UAAU,2BAA0B,SAC/C,qBAAKA,UAAU,QAAO,SAAC,qBAQhCE,EA7EI,WAEf,MAAwB9D,mBAAS,IAAG,mBAA7BqC,EAAI,KAAE0B,EAAO,KACpB,EAAmDhE,cAA5CE,EAAO,EAAPA,QAASE,EAAK,EAALA,MAAO2B,EAAY,EAAZA,aAAcX,EAAU,EAAVA,WAErC6C,qBAAU,WACNC,MAGD,IAEH,IAAMC,EAAe,SAAC7B,GAClB0B,EAAQ1B,IAGN4B,EAAa,WACf9C,IACA,IAAMY,EAAKoC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DvC,EAAaC,GACRuC,KAAKJ,IAGRK,EAAepE,EAAQ,cAACd,EAAA,EAAY,IAAK,KACzCmF,EAAUvE,EAAU,cAACwE,EAAA,EAAO,IAAK,KACjCC,EAAYzE,GAAWE,EAA+B,KAAtB,cAAC,EAAI,CAACkC,KAAMA,IAElD,OACI,sBAAKuB,UAAU,aAAY,UACtBW,EACAC,EACAE,EACD,sBAAKd,UAAU,qBAAoB,UAC/B,oBAAGA,UAAU,oBAAmB,UAAC,8BACF,uBAAK,4CAGpC,mBAAGA,UAAU,oBAAmB,SAAC,0BAGjC,wBAAQe,QAASV,EAAYL,UAAU,sBAAqB,SACxD,qBAAKA,UAAU,QAAO,SAAC,aAE3B,qBAAKhE,IAAKgF,EAAS9E,IAAI,UAAU8D,UAAU,kC,wBCmE5CiB,G,MA9GE,SAACC,GAEd,MAAgC9E,mBAAS,IAAG,mBAArC+E,EAAQ,KAAEC,EAAW,KAC5B,EAA4ChF,oBAAS,GAAM,mBAApDiF,EAAc,KAAEC,EAAiB,KACxC,EAA4BlF,mBAAS,KAAI,mBAAlCyB,EAAM,KAAE0D,EAAS,KACxB,EAAgCnF,oBAAS,GAAM,mBAAxCoF,EAAQ,KAAEC,EAAW,KAE5B,EAA2CtF,cAApCE,EAAO,EAAPA,QAASE,EAAK,EAALA,MAAOoB,EAAgB,EAAhBA,iBAGvByC,qBAAU,WACNsB,EAAU7D,GAAQ,KACnB,IAEH,IAAM6D,EAAY,SAAC7D,EAAQ8D,GACbL,GAAVK,GACAhE,EAAiBE,GACZ6C,KAAKkB,IAGRA,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZV,GAAY,SAAAD,GAAQ,4BAAQA,GAAQ,YAAKU,OACzCP,GAAkB,SAAAD,GAAc,OAAI,KACpCE,GAAU,SAAA1D,GAAM,OAAIA,EAAS,KAC7B4D,GAAY,SAAAD,GAAQ,OAAIM,MAGtBE,EAAWC,iBAAO,IAElBC,EAAc,SAAA/D,GAChB6D,EAASG,QAAQC,SAAQ,SAAA5D,GAAI,OAAIA,EAAK6D,UAAUC,OAAO,0BACvDN,EAASG,QAAQhE,GAAIkE,UAAUE,IAAI,uBACnCP,EAASG,QAAQhE,GAAIqE,SAmDzB,IAAMpD,EA5CN,SAAqBqD,GACjB,IAAMrD,EAASqD,EAAIzE,KAAI,SAACQ,EAAMkE,GAC1B,IAAI3C,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBvB,EAAKK,YACLkB,EAAW,CAAC,UAAc,UAI1B,cAAC4C,EAAA,EAAa,CAAeC,QAAS,IAAKC,WAAW,aAAY,SAEtD,qBAAIC,IAAM,SAAAC,GAAE,OAAIf,EAASG,QAAQO,GAAKK,GAClC/C,UAAU,aAEVgD,SAAU,EACVjC,QAAS,WACLG,EAAM+B,eAAezE,EAAKL,IAC1B+D,EAAYQ,IAEhBQ,UAAW,SAACC,GACM,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnBlC,EAAM+B,eAAezE,EAAKL,IAC1B+D,EAAYQ,KAElB,UAGE,qBAAK1G,IAAKwC,EAAKK,UAAW3C,IAAKsC,EAAKE,KAAMhD,MAAOqE,IACjD,qBAAKC,UAAU,aAAY,SAAExB,EAAKE,SAfjCF,EAAKL,KAJNK,EAAKL,OA2BjC,OACI,oBAAI6B,UAAU,aAAY,SACtB,cAACqD,EAAA,EAAe,CAACC,UAAW,KAAK,SAC5BlE,MAMHmE,CAAYpC,GAEpBR,EAAepE,EAAQ,cAACd,EAAA,EAAY,IAAK,KACzCmF,EAAUvE,IAAYgF,EAAiB,cAACR,EAAA,EAAO,IAAK,KAE1D,OACI,sBAAKb,UAAU,aAAY,UACtBZ,EACAuB,EACAC,EACD,wBACAZ,UAAU,mCACVwD,SAAUnC,EACV3F,MAAO,CAAC,QAAW8F,EAAW,OAAS,SACvCT,QAAS,kBAAMW,EAAU7D,IAAQ,SAC7B,qBAAKmC,UAAU,QAAO,SAAC,qBC3FxByD,G,MAjBE,WACb,OACI,qCACI,mBAAGzD,UAAU,eAAc,SAAC,iDAC5B,sBAAKA,UAAU,WAAU,UACrB,sBAAKA,UAAU,yBAAwB,UACnC,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,kCCqCzBH,G,MAAO,SAAH,GAAgB,IAAXpB,EAAI,EAAJA,KACJC,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,YAAaE,EAAqCJ,EAArCI,UAAWiB,EAA0BrB,EAA1BqB,SAAUZ,EAAgBT,EAAhBS,KAAMC,EAAUV,EAAVU,OAEjDY,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdlB,IACAkB,EAAW,CAAC,UAAc,YAI1B,qCACI,sBAAKC,UAAU,eAAc,UACzB,qBAAKhE,IAAK6C,EAAW3C,IAAKwC,EAAMhD,MAAOqE,IACvC,gCACI,qBAAKC,UAAU,kBAAiB,SAAEtB,IAClC,sBAAKsB,UAAU,aAAY,UACvB,mBAAGC,KAAMH,EAAUE,UAAU,sBAAqB,SAC9C,qBAAKA,UAAU,QAAO,SAAC,eAE3B,mBAAGC,KAAMf,EAAMc,UAAU,2BAA0B,SAC/C,qBAAKA,UAAU,QAAO,SAAC,oBAKvC,qBAAKA,UAAU,cAAa,SACvBrB,IAEL,qBAAKqB,UAAU,eAAc,SAAC,YAC9B,qBAAIA,UAAU,oBAAmB,UAC5Bb,EAAO4C,OAAS,EAAI,KAAO,yCAExB5C,EAAOnB,KAAI,SAACQ,EAAMkE,GAEd,KAAIA,EAAI,GACR,OACI,oBAAY1C,UAAU,oBAAmB,SACpCxB,EAAKE,MADDgE,cAetBgB,EA1FE,SAACxC,GAEd,MAAwB9E,mBAAS,MAAK,mBAA/BqC,EAAI,KAAE0B,EAAO,KAEpB,EAAmDhE,cAA5CE,EAAO,EAAPA,QAASE,EAAK,EAALA,MAAO2B,EAAY,EAAZA,aAAcX,EAAU,EAAVA,WAErC6C,qBAAU,WACNC,MACD,CAACa,EAAMyC,SAEV,IAAMtD,EAAa,WACf,IAAOsD,EAAUzC,EAAVyC,OACFA,IAILpG,IACAW,EAAayF,GACRjD,KAAKJ,KAGRA,EAAe,SAAC7B,GAClB0B,EAAQ1B,IAGNmF,EAAWnF,GAAQpC,GAAWE,EAAQ,KAAO,cAAC,EAAQ,IACtDoE,EAAepE,EAAQ,cAACd,EAAA,EAAY,IAAK,KACzCmF,EAAUvE,EAAU,cAACwE,EAAA,EAAO,IAAK,KACjCC,EAAYzE,GAAWE,IAAUkC,EAA8B,KAAtB,cAAC,EAAI,CAACA,KAAMA,IAE3D,OACI,sBAAKuB,UAAU,aAAY,UACtB4D,EACAjD,EACAC,EACAE,M,uBC2CE+C,G,MAhFE,WAEf,MAAwBzH,mBAAS,IAAG,mBAA7BqC,EAAI,KAAE0B,EAAO,KACpB,EAA8B/D,oBAAS,GAAM,mBAAtC0H,EAAO,KAAEC,EAAU,KAEpBC,EAAQ/B,mBAERgC,EAASC,YAAU,CACvBC,cAAe,CACb1F,KAAM,IAER2F,iBAAkBC,IAAW,CAC3B5F,KAAO4F,MACEC,SAAS,0BACTC,IAAI,EAAG,uCAElBC,SAAU,SAAAC,GACR1H,MAAM,4DAAD,OAA6D0H,EAAOhG,KAAKiG,OAAM,6CACjFhE,MAAK,SAAArD,GAAI,OAAIA,EAAKD,UAClBsD,MAAK,SAAArD,GACJ,GAAiC,IAA7BA,EAAKA,KAAKU,QAAQgE,OACpB,MAAM7E,MAER,MAAO,CACLiB,GAAId,EAAKA,KAAKU,QAAQ,GAAGI,GACzBO,KAAMrB,EAAKA,KAAKU,QAAQ,GAAGW,KAC3BC,YAAatB,EAAKA,KAAKU,QAAQ,GAAGY,YAActB,EAAKA,KAAKU,QAAQ,GAAGY,YAAc,0BACnFE,UAAWxB,EAAKA,KAAKU,QAAQ,GAAGc,UAAUC,KAAO,IAAMzB,EAAKA,KAAKU,QAAQ,GAAGc,UAAUE,cAGzF2B,MAAK,SAAArD,GACJ8C,EAAQ9C,GACR0G,GAAW,MAEZY,OAAM,WACLZ,GAAW,SAQnB,OADAa,QAAQC,IAAI,eAEV,mCACE,uBAAM7E,UAAU,aAAawE,SAAUP,EAAOa,aAAa,UACzD,uBAAOC,QAAQ,OAAM,SAAC,iCAGtB,sBAAK/E,UAAU,mBAAkB,UAC/B,uBAAO8C,IAAKkB,EACVgB,KAAK,OACL7G,GAAG,OACHO,KAAK,OACLuG,MAAOhB,EAAOQ,OAAOhG,KACrByG,YAAY,aACZC,SAAUlB,EAAOmB,aACjBC,OAAQpB,EAAOqB,aAEjB,wBAAQtF,UAAU,sBAAsBgF,KAAK,SAAQ,SACnD,qBAAKhF,UAAU,QAAO,SAAC,eAGzB8D,GAAWyB,OAAOC,KAAK/G,GAAMsD,OAAS,EACtC,sBAAK/B,UAAU,WAAU,UACvB,sBAAKA,UAAU,kBAAiB,UAAC,mBAAiBvB,EAAKC,KAAK,YAC5D,cAAC,IAAI,CAAC+G,GAAE,sBAAiBhH,EAAKN,IAAM6B,UAAU,sBAAsBgF,KAAK,SAAQ,SAC/E,qBAAKhF,UAAU,QAAO,SAAC,iBAElB,KACV8D,EACC,qBAAK9D,UAAU,gBAAe,SAAC,8DAEtB,KACViE,EAAOyB,OAAOjH,MAAQwF,EAAO0B,QAAQlH,KAAO,qBAAKuB,UAAU,QAAO,SAAEiE,EAAOyB,OAAOjH,OAAc,Y,gCC7D1FmH,EAlBI,iKAGhB,OAHgB,oCACjBC,MAAQ,CACNtJ,OAAO,GACR,EAYA,OAZA,8CAED,SAAkBA,EAAOuJ,GACvBC,KAAKC,SAAS,CAACzJ,OAAQ,MACxB,oBAED,WACE,OAAIwJ,KAAKF,MAAMtJ,MACN,cAACd,EAAA,EAAY,IAGfsK,KAAK7E,MAAM+E,aACnB,EAfgB,CAASC,aCHb,MAA0B,mCCqC1BC,UA5BE,WACf,MAAgC/J,mBAAS,MAAK,mBAAvCgK,EAAY,KAAEjG,EAAO,KAM5B,OACE,qCACE,cAAC,EAAa,UACV,cAAC,EAAU,MAEf,sBAAKH,UAAU,gBAAe,UAC1B,cAAC,EAAa,UACV,cAAC,EAAQ,CAACiD,eAXC,SAAC9E,GACpBgC,EAAQhC,QAYJ,sBAAK6B,UAAU,qBAAoB,UACjC,cAAC,EAAa,UACZ,cAAC,EAAQ,CAAC2D,OAAQyC,MAEpB,cAAC,EAAQ,UAGf,qBAAKpG,UAAU,gBAAgBhE,IAAKqK,EAAYnK,IAAI","file":"static/js/4.d9ff65a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} \r\n    src={img}\r\n    alt='error'/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const {loading, request, error, clearError} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=0cabaa5c82f123bb2173e8576631d568';\r\n  const _baseOffset = 210;\r\n  const _comicsOffset = 10500;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = _comicsOffset) => {\r\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const getItem = async (id, item) => {\r\n    let res;\r\n    if (item === 'char') {\r\n      res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n    }\r\n    else if (item === 'comic') {\r\n      res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n    }\r\n    \r\n  }\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homapage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comic) => {\r\n    return {\r\n      id: comic.id,\r\n      title: comic.title,\r\n      price: comic.digitalId && comic.prices[0].price ? comic.prices[0].price + '$' : 'NOT AVAILABLE',\r\n      thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n      description: comic.description || 'There is no description',\r\n      language: comic.textObjects.language || 'en-us',\r\n      pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages'\r\n    }\r\n  }\r\n  return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getItem}\r\n}\r\n\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setLoading(false);\r\n      return data;\r\n\r\n    } catch(e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return {loading, request, error, clearError};\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 3000);\n        // return () => clearInterval(timerId);\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEned, setcharEned] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setcharEned(charEned => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = id => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n  \n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n        \n                            <li ref={(el => itemRefs.current[i] = el)}\n                                className=\"char__item\"\n                                key={item.id}\n                                tabIndex={0}\n                                onClick={() => {\n                                    props.onCharSelected(item.id);\n                                    focusOnItem(i)\n                                }}\n                                onKeyDown={(e) => {\n                                    if (e.key === ' ' || e.key === \"Enter\") {\n                                        props.onCharSelected(item.id);\n                                        focusOnItem(i);\n                                    }\n                                }}\n                                >\n                                \n                                    <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                                    <div className=\"char__name\">{item.name}</div>\n                            </li>\n                       \n                    \n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {items}\n            {errorMessage}\n            {spinner}       \n            <button \n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            style={{'display': charEned ? 'none' : 'block'}}\n            onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useFormik } from \"formik\";\r\nimport { useState, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\n\r\nimport './charForm.scss';\r\n\r\n\r\nconst CharForm = () => {\r\n\r\n  const [char, setChar] = useState({});\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  const input = useRef();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      char: ''\r\n    },\r\n    validationSchema: Yup.object({\r\n      char : Yup.string()\r\n              .required('This field is required')\r\n              .min(3, 'Minimum 3 letters are required...')\r\n    }),\r\n    onSubmit: values => {\r\n      fetch(`https://gateway.marvel.com:443/v1/public/characters?name=${values.char.trim()}&apikey=0cabaa5c82f123bb2173e8576631d568`)\r\n        .then(data => data.json())\r\n        .then(data => {\r\n          if (data.data.results.length === 0) {\r\n            throw Error;\r\n          }\r\n          return {\r\n            id: data.data.results[0].id,\r\n            name: data.data.results[0].name,\r\n            description: data.data.results[0].description ? data.data.results[0].description : 'There is no description',\r\n            thumbnail: data.data.results[0].thumbnail.path + '.' + data.data.results[0].thumbnail.extension\r\n          }\r\n        })\r\n        .then(data => {\r\n          setChar(data);\r\n          setIsError(false);\r\n        })\r\n        .catch(() => {\r\n          setIsError(true);\r\n        });\r\n    }\r\n  })\r\n\r\n  // console.log(isError)\r\n  // console.log(char)\r\n  console.log('render form')\r\n  return (\r\n    <>\r\n      <form className='char__form' onSubmit={formik.handleSubmit}>\r\n        <label htmlFor=\"char\">\r\n          Or find a character by name:\r\n        </label>\r\n        <div className=\"char__form-items\">\r\n          <input ref={input}\r\n            type=\"text\" \r\n            id='char' \r\n            name=\"char\" \r\n            value={formik.values.char}\r\n            placeholder='Enter name'\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            />\r\n          <button className='button button__main' type='submit'>\r\n            <div className=\"inner\">FIND</div>\r\n          </button>\r\n        </div>\r\n        {!isError && Object.keys(char).length > 0 ? \r\n          <div className=\"response\">\r\n            <div className=\"response__title\">There is! Visit {char.name} page?</div>\r\n            <Link to={`/characters/${char.id}`} className='button button__main' type='submit'>\r\n              <div className=\"inner\">TO PAGE</div>\r\n            </Link>\r\n          </div> : null}\r\n        {isError ? \r\n          <div className=\"response__red\">\r\n            The character was not found. Check the name and try again\r\n          </div> : null}\r\n        {formik.errors.char && formik.touched.char ? <div className=\"error\">{formik.errors.char}</div> : null}\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CharForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({error : true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharForm from \"../charForm/CharForm\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCgarSelected = (id) => {\r\n      setChar(id); \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n          <RandomChar/>   \r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n          <ErrorBoundary>\r\n              <CharList onCharSelected={onCgarSelected}/>\r\n          </ErrorBoundary>\r\n          <div className=\"char__content-side\">\r\n            <ErrorBoundary>\r\n              <CharInfo charId={selectedChar}/>\r\n            </ErrorBoundary>\r\n            <CharForm/>\r\n          </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}